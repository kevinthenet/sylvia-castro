---
import '@fontsource/inter/latin-400.css';
import '@fontsource/inter/latin-500.css';
import { ViewTransitions } from 'astro:transitions';
import Footer from '../components/layout/Footer.astro';
import Header from '../components/layout/Header.astro';
import { localize } from 'src/i18n';

interface Props {
  description: string;
  page: any;
  title: string;
}

const { description, page, title } = Astro.props;
---

<!doctype html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/sylvia-castro-logo.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/sylvia-castro-logo.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/sylvia-castro-logo.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title x-text={localize(page, 'title')}>{title}</title>
    <ViewTransitions />
  </head>
  <body
    class="bg-primary-50 text-primary-950 antialiased transition dark:bg-primary-950 dark:text-primary-200"
  >
    <Header />
    <main transition:animate="fade">
      <slot />
    </main>
    <Footer />
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';
      import AlpineI18n from 'alpinejs-i18n';

      const messagesResponse = await fetch('/localization');

      const { messages } = await messagesResponse.json();

      document.addEventListener('alpine-i18n:ready', function () {
        const locale = localStorage.getItem('locale') || 'en';
        window.AlpineI18n.fallbackLocale = 'en';
        window.AlpineI18n.create(locale, messages);
      });

      Alpine.plugin(collapse);
      Alpine.plugin(AlpineI18n);

      Alpine.store('theme', {
        init() {
          this.isDark = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
              return localStorage.getItem('theme') === 'dark';
            }

            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return true;
            }

            return false;
          })();
        },

        isDark: false,

        toggle() {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        },
      });

      Alpine.store('locale', {
        init() {
          this.spanishEnabled = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('locale')) {
              return localStorage.getItem('locale') === 'es';
            }

            if (window.navigator.language.startsWith('es')) {
              return true;
            }

            return false;
          })();
        },

        spanishEnabled: false,

        toggle() {
          this.spanishEnabled = !this.spanishEnabled;
          const nextLocale = this.spanishEnabled ? 'es' : 'en';
          localStorage.setItem('locale', nextLocale);
          window.AlpineI18n.locale = nextLocale;
        },
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
